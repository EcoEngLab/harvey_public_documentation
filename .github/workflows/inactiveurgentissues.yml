# --------------------------------------------------------------
#  PURPOSE:
# Runs every Monday morning (09:00 UTC) and checks for any open
# GitHub issues in this repository that have:
#   - The label "urgent"
#   - No activity (comments or updates) in the past 7 days
#
# It then sends a simple text message to the Slack channel via
# an Incoming Webhook listing those issues and their assignees.
#
# --------------------------------------------------------------

name: Urgent issues weekly Slack reminder

on:
  #  Run automatically every Monday at 09:00 UTC
  schedule:
    - cron: '0 9 * * 1'
  #  Allows manual trigger from the GitHub Actions tab (for testing)
  workflow_dispatch:

jobs:
  notify:
    runs-on: ubuntu-latest
    permissions:
      contents: read   # needed to read repository data
      issues: read     # needed to list/search issues

    steps:
      - name: Post urgent, inactive issues to Slack
        #    This action lets us write a short JavaScript script
        #    that interacts with GitHub’s API easily.
        uses: actions/github-script@v7
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}   # Slack Webhook secret
        with:
          script: |
            // --- Basic setup ---
            const { owner, repo } = context.repo;
            // context.repo automatically gives the repository owner and name,
            // e.g. { owner: "EcoEngLab", repo: "harvey_public_documentation" }

            // --- 1: Calculate the cutoff date (7 days ago) ---
            const now = new Date();
            // We use UTC so it's consistent across servers
            const utc = new Date(Date.UTC(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate()));
            // Move 7 days backwards
            utc.setUTCDate(utc.getUTCDate() - 7);
            // Format date to YYYY-MM-DD (GitHub search requires this)
            const pad = n => String(n).padStart(2, '0');
            const cutoff = `${utc.getUTCFullYear()}-${pad(utc.getUTCMonth() + 1)}-${pad(utc.getUTCDate())}`;

            // --- 2: Build a GitHub search query ---
            // This finds all open issues with label:urgent that were last updated before cutoff
            const q = `repo:${owner}/${repo} is:issue is:open label:urgent updated:<${cutoff}`;

            // --- 3: Run the search using GitHub’s API ---
            const results = await github.paginate(github.rest.search.issuesAndPullRequests, {
              q,
              sort: 'updated',
              order: 'asc',
              per_page: 100
            });

            // Filter out pull requests, just in case
            const issues = results.filter(i => !i.pull_request);

            // --- 4: If no matching issues, stop here ---
            if (!issues.length) {
              console.log('No urgent issues are stale. Nothing to post.');
              return;
            }

            // --- 5: Build a simple Slack message ---
            const lines = [];
            lines.push(`*Urgent issues inactive for 7+ days* (cutoff: ${cutoff})`);

            for (const issue of issues.slice(0, 20)) {  // Limit to 20 results for brevity
              // Get assignee GitHub usernames, or say "no assignees"
              const assignees = (issue.assignees || [])
                .map(a => `@${a.login}`)
                .join(', ') || 'no assignees';

              // Extract the date the issue was last updated
              const updated = (issue.updated_at || '').slice(0, 10);

              // Add formatted lines for Slack
              lines.push(`• #${issue.number} ${issue.title} — ${issue.html_url}`);
              lines.push(`  Last updated: ${updated} | Assignees: ${assignees}`);
            }

            // If there were more than 20, mention that
            if (issues.length > 20) {
              lines.push(`…and ${issues.length - 20} more.`);
            }

            // --- 6: Send the message to Slack ---
            const webhook = process.env.SLACK_WEBHOOK_URL;
            if (!webhook) {
              core.setFailed('Missing SLACK_WEBHOOK_URL secret');
              return;
            }

            // Create a JSON payload with our message
            const payload = { text: lines.join('\n') };

            // Send it to Slack via HTTP POST
            const resp = await fetch(webhook, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(payload)
            });

            // If Slack returns an error (rare), mark job as failed
            if (!resp.ok) {
              const err = await resp.text();
              core.setFailed(`Slack webhook failed: ${resp.status} ${resp.statusText} - ${err}`);
            } else {
              core.info(`✅ Posted ${issues.length} urgent stale issue(s) to Slack.`);
            }
